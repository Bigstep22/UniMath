School and Workshop on Univalent Mathematics 2019
topic for advanced participants: Recursion and Induction schemes
mentor: Ralph Matthes

What is in UniMath concerning inductive datatypes?

Inductive datatypes of Coq are not considered part of the UniMath language. Only a few of Coq's inductive datatypes are
imported for the time being:
Coq.Init.Logic provides the inductive types True, False, and, or, ex, ex2, eq, inhabited (hence they are taken from the
Coq library). But they are not used in the UniMath library (can be syntactically checked for True and False and only hoped
for for the other ones).

Foundations.Preamble provides the inductive types (à la Coq - but not from the Coq library), redefined in the universe UU:
- empty
- unit
- bool
- coprod
- nat
- paths
Dependent sums are not directly given as inductive type but as a record named total2.

Outside of this preamble, inductive types and records are forbidden to define. There is an exception:
leF is defined inductively in NumberSystems/NaturalNumbers_le_Inductive.v - for "illustration purposes".

nat is hence the only recursive datatype that is obtained by the Coq mechanism of creating inductive datatypes.
MoreFoundations/Nat.v presents uniqueness of the usual recursor in HoTT style: hNatRecursionUniq

Where are datatypes in UniMath then?

Combinatorics/Lists.v presents an implementation of homogeneous lists as pairs of its length n and an n-fold product
of the base type. The usual list induction/recursion principle list_ind comes from induction on lengths.

Combinatorics/FiniteSequences.v presents vectors and matrices, but they are not recursive datatypes.

W-types are well-founded tree structures that are parameterized over constructors and branching for each constructor.
Package Induction of UniMath is dedicated to them and their coinductive analogue (M-types). The author of the package
is Langston Barrett who participates in the present UniMath school. The approach is clearly motivated by category-theoretic
concepts (initial algebras, final coalgebras).
The package contains non-trivial constructions and results but does not seem completed. In particular, there are no
concrete illustrations of the use of the package.^(1)

The current UniMath library has more general developments directed towards datatypes based on category theory. One
of the approaches is based on omega-cocontinuity of functors, and their initial algebras are obtained as colimits
of chains (the well-known construction of Adámek). These developments are in CategoryTheory/Chains. Lists are then
an instance, seen in CategoryTheory/Inductives/Lists.v. CategoryTheory/Inductives also describes binary trees and
lambda-calculus in this style.

One can explore the wealth of datatypes that are obtained as initial algebras of functors by studying the generation
of such functors. This is more interesting for families of datatypes - lambda-calculus is an example.
This line of extension is pursued in the package SubstitutionSystems - with the goal of studying substitution for such
inductives families if they have a natural interpretation as term systems (lambda-calculus being the guiding example).
Signatures.v already presents the semantic concept directed towards substitution. BindingSigToMonad.v starts
with the syntactic notion of binding signature - to describe (families of) inductive datatypes that involve binding.
MultiSorted.v extends this notion to multisorted syntax.

A different direction of generalization is towards the recursion principles one obtains as soon as one has an initial
algebra. Preliminary work on this is in CategoryTheory/CategoricalRecursionSchemes.v. It presents Mendler-style
recursion in a very abstract form (adjoint folds in the sense of Hinze and Wu). For the time being, the UniMath library
only contains the abstract theory, and no use is being made of it.^(2) In particular, no connection is made to
GenMendlerIteration.v and GenMendlerIteration_alt.v of SubstitutionSystems where Mendler-style iteration is developed
once under abstract conditions (that will probably need an impredicative justification) and once under the condition
of omega-cocontinuity that is satisfied for the datatypes described through (multisorted) binding signatures.^(4)

What is completely missing from the library: an impredicative justification of datatypes and recursion schemes, and
implementations of (co)datatypes whose recursion principles calculate well.

For the former, there has been an attempt in UniMath:
https://github.com/rmatthes/UniMath/tree/inductive-families-MSFP06/UniMath/InductiveFamilies
And there seems to be a complete solution by Awodey, Frey and Speight in HoTT: https://arxiv.org/abs/1802.02820
(also see https://homotopytypetheory.org/2017/10/11/impredicative-encodings-of-inductive-types-in-hott )^(6)
Sam Speight participates in the present UniMath school.

For the latter, there is a solution in HoTT by Felix Rech, see https://www.ps.uni-saarland.de/~rech/bachelor.php .
A preliminary implementation of unknown status in UniMath has been attempted at the UniMath school 2017 by
Felix Rech and Luis Scoccola. The latest visible commit is in branch
https://github.com/LuisScoccola/UniMath/tree/inductive_families
For your convenience, I have integrated this into my current fork of UniMath:
https://github.com/rmatthes/UniMath/tree/followscoccolaandrech
A good part of it compiles, in particular the construction of families of M-types by using chains (hence by induction
over nat) - with the computation rule proven by reflexivity! The development is "standalone" and does not use
CategoryTheory/Chains.^(3) Other developments are in a limbo state (incompatible ends waiting to be brought together).^(5)

From the description above, multiple projects can arise naturally that could show the usefulness of the UniMath library
(1,2), that could better integrate the different developments (3,4), that could take care of the currently loose ends (5)
or that could add new principles (6) for getting datatypes and their induction and recursion schemes.




